{"ast":null,"code":"import { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { app } from '../firebase/config';\nconst storage = getStorage(app);\n\n// Upload image to Firebase Storage with proper path\nexport const uploadImageToFirebase = async imageFile => {\n  try {\n    // Create a unique name for the image\n    const timestamp = new Date().getTime();\n    const randomId = Math.random().toString(36).substring(2, 10);\n    const safeFileName = imageFile.name.replace(/[^a-zA-Z0-9.]/g, '_');\n    const fileName = `products/${timestamp}_${randomId}_${safeFileName}`;\n\n    // Create a reference to the file path\n    const storageRef = ref(storage, fileName);\n\n    // Upload the file with metadata\n    const metadata = {\n      contentType: imageFile.type,\n      customMetadata: {\n        'fileName': imageFile.name,\n        'fileSize': imageFile.size.toString(),\n        'uploadedAt': new Date().toISOString()\n      }\n    };\n    const snapshot = await uploadBytes(storageRef, imageFile, metadata);\n\n    // Get download URL\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    return {\n      url: downloadURL,\n      path: fileName\n    };\n  } catch (error) {\n    console.error(\"Error uploading image to Firebase:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getStorage","ref","uploadBytes","getDownloadURL","app","storage","uploadImageToFirebase","imageFile","timestamp","Date","getTime","randomId","Math","random","toString","substring","safeFileName","name","replace","fileName","storageRef","metadata","contentType","type","customMetadata","size","toISOString","snapshot","downloadURL","url","path","error","console"],"sources":["/Users/yeduruabhiram/Desktop/suresh ment01/src/utils/firebaseStorage.js"],"sourcesContent":["import { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { app } from '../firebase/config';\n\nconst storage = getStorage(app);\n\n// Upload image to Firebase Storage with proper path\nexport const uploadImageToFirebase = async (imageFile) => {\n  try {\n    // Create a unique name for the image\n    const timestamp = new Date().getTime();\n    const randomId = Math.random().toString(36).substring(2, 10);\n    const safeFileName = imageFile.name.replace(/[^a-zA-Z0-9.]/g, '_');\n    const fileName = `products/${timestamp}_${randomId}_${safeFileName}`;\n    \n    // Create a reference to the file path\n    const storageRef = ref(storage, fileName);\n    \n    // Upload the file with metadata\n    const metadata = {\n      contentType: imageFile.type,\n      customMetadata: {\n        'fileName': imageFile.name,\n        'fileSize': imageFile.size.toString(),\n        'uploadedAt': new Date().toISOString()\n      }\n    };\n    \n    const snapshot = await uploadBytes(storageRef, imageFile, metadata);\n    \n    // Get download URL\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    \n    return {\n      url: downloadURL,\n      path: fileName\n    };\n  } catch (error) {\n    console.error(\"Error uploading image to Firebase:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC/E,SAASC,GAAG,QAAQ,oBAAoB;AAExC,MAAMC,OAAO,GAAGL,UAAU,CAACI,GAAG,CAAC;;AAE/B;AACA,OAAO,MAAME,qBAAqB,GAAG,MAAOC,SAAS,IAAK;EACxD,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACtC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5D,MAAMC,YAAY,GAAGT,SAAS,CAACU,IAAI,CAACC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC;IAClE,MAAMC,QAAQ,GAAG,YAAYX,SAAS,IAAIG,QAAQ,IAAIK,YAAY,EAAE;;IAEpE;IACA,MAAMI,UAAU,GAAGnB,GAAG,CAACI,OAAO,EAAEc,QAAQ,CAAC;;IAEzC;IACA,MAAME,QAAQ,GAAG;MACfC,WAAW,EAAEf,SAAS,CAACgB,IAAI;MAC3BC,cAAc,EAAE;QACd,UAAU,EAAEjB,SAAS,CAACU,IAAI;QAC1B,UAAU,EAAEV,SAAS,CAACkB,IAAI,CAACX,QAAQ,CAAC,CAAC;QACrC,YAAY,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC;MACvC;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMzB,WAAW,CAACkB,UAAU,EAAEb,SAAS,EAAEc,QAAQ,CAAC;;IAEnE;IACA,MAAMO,WAAW,GAAG,MAAMzB,cAAc,CAACwB,QAAQ,CAAC1B,GAAG,CAAC;IAEtD,OAAO;MACL4B,GAAG,EAAED,WAAW;MAChBE,IAAI,EAAEX;IACR,CAAC;EACH,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}