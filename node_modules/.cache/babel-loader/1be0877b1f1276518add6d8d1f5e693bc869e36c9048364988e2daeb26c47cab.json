{"ast":null,"code":"import imageCompression from 'browser-image-compression';\n\n// Default fallback image URL from a public source\nexport const DEFAULT_TEDDY_IMAGE = 'https://res.cloudinary.com/davjxvz8w/image/upload/v1695721605/teddy_bear_defaults/default-teddy.jpg';\n\n// Cloudinary configuration\nconst CLOUDINARY_CLOUD_NAME = 'davjxvz8w';\nconst UPLOAD_PRESET = 'teddy_bears_unsigned'; // Create an unsigned upload preset in your Cloudinary dashboard\n\n/**\n * Compresses an image file before upload\n */\nexport const compressImage = async file => {\n  if (!file) return null;\n  const options = {\n    maxSizeMB: 0.8,\n    // Compress to 800KB\n    maxWidthOrHeight: 1200,\n    useWebWorker: true,\n    initialQuality: 0.8\n  };\n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error compressing image:\", error);\n    return file; // Return original file if compression fails\n  }\n};\n\n/**\n * Uploads an image to Cloudinary using the unsigned preset\n */\nexport const uploadToCloudinary = async (file, progressCallback = null) => {\n  if (!file) return null;\n  try {\n    // First compress the image\n    const compressedFile = await compressImage(file);\n\n    // Generate folder path based on timestamp\n    const timestamp = new Date().getTime();\n    const folderPath = `teddy_bears/${timestamp}`;\n\n    // Create form data for Cloudinary upload\n    const formData = new FormData();\n    formData.append('file', compressedFile);\n    formData.append('upload_preset', UPLOAD_PRESET);\n    formData.append('folder', folderPath);\n\n    // Track upload progress\n    const xhr = new XMLHttpRequest();\n\n    // Create a promise to handle the upload\n    const uploadPromise = new Promise((resolve, reject) => {\n      xhr.open('POST', `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`, true);\n\n      // Upload progress\n      xhr.upload.onprogress = event => {\n        if (event.lengthComputable && progressCallback) {\n          const progress = Math.round(event.loaded / event.total * 100);\n          progressCallback(progress);\n        }\n      };\n\n      // Handle completion\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          const response = JSON.parse(xhr.responseText);\n          resolve({\n            url: response.secure_url,\n            publicId: response.public_id,\n            provider: 'cloudinary'\n          });\n        } else {\n          reject(new Error(`Upload failed with status: ${xhr.status}`));\n        }\n      };\n\n      // Handle errors\n      xhr.onerror = function () {\n        reject(new Error('Upload failed due to network error'));\n      };\n\n      // Send the form data\n      xhr.send(formData);\n    });\n    return await uploadPromise;\n  } catch (error) {\n    console.error(\"Error in Cloudinary upload:\", error);\n    throw error;\n  }\n};\n\n/**\n * Handle image upload with fallback to default image\n */\nexport const handleImageUpload = async (file, progressCallback = null) => {\n  if (!file) {\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default_teddy',\n      provider: 'default'\n    };\n  }\n  try {\n    // Upload to Cloudinary\n    return await uploadToCloudinary(file, progressCallback);\n  } catch (error) {\n    console.error(\"Cloudinary upload failed:\", error);\n\n    // Return default image if upload fails\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default_teddy',\n      provider: 'default'\n    };\n  }\n};","map":{"version":3,"names":["imageCompression","DEFAULT_TEDDY_IMAGE","CLOUDINARY_CLOUD_NAME","UPLOAD_PRESET","compressImage","file","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","error","console","uploadToCloudinary","progressCallback","compressedFile","timestamp","Date","getTime","folderPath","formData","FormData","append","xhr","XMLHttpRequest","uploadPromise","Promise","resolve","reject","open","upload","onprogress","event","lengthComputable","progress","Math","round","loaded","total","onload","status","response","JSON","parse","responseText","url","secure_url","publicId","public_id","provider","Error","onerror","send","handleImageUpload"],"sources":["/Users/yeduruabhiram/Desktop/suresh ment01/src/utils/cloudinaryUpload.js"],"sourcesContent":["import imageCompression from 'browser-image-compression';\n\n// Default fallback image URL from a public source\nexport const DEFAULT_TEDDY_IMAGE = 'https://res.cloudinary.com/davjxvz8w/image/upload/v1695721605/teddy_bear_defaults/default-teddy.jpg';\n\n// Cloudinary configuration\nconst CLOUDINARY_CLOUD_NAME = 'davjxvz8w';\nconst UPLOAD_PRESET = 'teddy_bears_unsigned'; // Create an unsigned upload preset in your Cloudinary dashboard\n\n/**\n * Compresses an image file before upload\n */\nexport const compressImage = async (file) => {\n  if (!file) return null;\n  \n  const options = {\n    maxSizeMB: 0.8, // Compress to 800KB\n    maxWidthOrHeight: 1200,\n    useWebWorker: true,\n    initialQuality: 0.8\n  };\n  \n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error compressing image:\", error);\n    return file; // Return original file if compression fails\n  }\n};\n\n/**\n * Uploads an image to Cloudinary using the unsigned preset\n */\nexport const uploadToCloudinary = async (file, progressCallback = null) => {\n  if (!file) return null;\n  \n  try {\n    // First compress the image\n    const compressedFile = await compressImage(file);\n    \n    // Generate folder path based on timestamp\n    const timestamp = new Date().getTime();\n    const folderPath = `teddy_bears/${timestamp}`;\n    \n    // Create form data for Cloudinary upload\n    const formData = new FormData();\n    formData.append('file', compressedFile);\n    formData.append('upload_preset', UPLOAD_PRESET);\n    formData.append('folder', folderPath);\n    \n    // Track upload progress\n    const xhr = new XMLHttpRequest();\n    \n    // Create a promise to handle the upload\n    const uploadPromise = new Promise((resolve, reject) => {\n      xhr.open('POST', `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`, true);\n      \n      // Upload progress\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable && progressCallback) {\n          const progress = Math.round((event.loaded / event.total) * 100);\n          progressCallback(progress);\n        }\n      };\n      \n      // Handle completion\n      xhr.onload = function() {\n        if (xhr.status === 200) {\n          const response = JSON.parse(xhr.responseText);\n          resolve({\n            url: response.secure_url,\n            publicId: response.public_id,\n            provider: 'cloudinary'\n          });\n        } else {\n          reject(new Error(`Upload failed with status: ${xhr.status}`));\n        }\n      };\n      \n      // Handle errors\n      xhr.onerror = function() {\n        reject(new Error('Upload failed due to network error'));\n      };\n      \n      // Send the form data\n      xhr.send(formData);\n    });\n    \n    return await uploadPromise;\n  } catch (error) {\n    console.error(\"Error in Cloudinary upload:\", error);\n    throw error;\n  }\n};\n\n/**\n * Handle image upload with fallback to default image\n */\nexport const handleImageUpload = async (file, progressCallback = null) => {\n  if (!file) {\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default_teddy',\n      provider: 'default'\n    };\n  }\n  \n  try {\n    // Upload to Cloudinary\n    return await uploadToCloudinary(file, progressCallback);\n  } catch (error) {\n    console.error(\"Cloudinary upload failed:\", error);\n    \n    // Return default image if upload fails\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default_teddy',\n      provider: 'default'\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}