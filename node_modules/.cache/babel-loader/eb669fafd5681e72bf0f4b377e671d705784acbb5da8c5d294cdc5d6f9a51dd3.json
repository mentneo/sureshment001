{"ast":null,"code":"import imageCompression from 'browser-image-compression';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../firebase/config';\n\n// Default teddy bear image URL (remote URL rather than base64)\nexport const DEFAULT_TEDDY_IMAGE = 'https://firebasestorage.googleapis.com/v0/b/suresh-teddy-bears-shop.appspot.com/o/default-teddy.jpg?alt=media';\n\n/**\n * Compresses an image file\n */\nexport const compressImage = async file => {\n  if (!file) return null;\n  const options = {\n    maxSizeMB: 0.5,\n    // Compress to 500KB\n    maxWidthOrHeight: 800,\n    useWebWorker: true\n  };\n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error compressing image:\", error);\n    return file; // Return original file if compression fails\n  }\n};\n\n/**\n * Creates a thumbnail version of the image\n */\nexport const createThumbnail = async file => {\n  if (!file) return null;\n  const options = {\n    maxSizeMB: 0.1,\n    // Very small thumbnail (100KB)\n    maxWidthOrHeight: 200,\n    useWebWorker: true\n  };\n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error creating thumbnail:\", error);\n    return null;\n  }\n};\n\n/**\n * Uploads an image to Firebase Storage\n */\nexport const uploadToFirebase = async (file, progressCallback = null) => {\n  if (!file) return null;\n  try {\n    // First compress the image\n    const compressedFile = await compressImage(file);\n\n    // Generate a unique path in storage\n    const timestamp = new Date().getTime();\n    const fileName = file.name.replace(/[^a-zA-Z0-9.]/g, '_');\n    const storagePath = `products/${timestamp}_${fileName}`;\n    const storageRef = ref(storage, storagePath);\n\n    // Upload to Firebase Storage with progress monitoring\n    const uploadTask = uploadBytesResumable(storageRef, compressedFile);\n\n    // Return a promise that resolves when upload is complete\n    return new Promise((resolve, reject) => {\n      uploadTask.on('state_changed',\n      // Progress handler\n      snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        if (progressCallback) {\n          progressCallback(progress);\n        }\n      },\n      // Error handler\n      error => {\n        console.error(\"Upload error:\", error);\n        reject(error);\n      },\n      // Complete handler\n      async () => {\n        // Get download URL\n        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n\n        // Return the image data\n        resolve({\n          url: downloadURL,\n          publicId: storagePath,\n          provider: 'firebase',\n          size: compressedFile.size\n        });\n      });\n    });\n  } catch (error) {\n    console.error(\"Error in upload process:\", error);\n    throw error;\n  }\n};\n\n/**\n * Handle image upload with fallbacks\n */\nexport const handleImageUpload = async (file, progressCallback = null) => {\n  if (!file) {\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default-teddy',\n      provider: 'default'\n    };\n  }\n  try {\n    // Try Firebase Storage upload first\n    return await uploadToFirebase(file, progressCallback);\n  } catch (error) {\n    console.error(\"Firebase upload failed:\", error);\n\n    // If everything fails, return the default image\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default-teddy',\n      provider: 'default'\n    };\n  }\n};","map":{"version":3,"names":["imageCompression","ref","uploadBytesResumable","getDownloadURL","storage","DEFAULT_TEDDY_IMAGE","compressImage","file","options","maxSizeMB","maxWidthOrHeight","useWebWorker","error","console","createThumbnail","uploadToFirebase","progressCallback","compressedFile","timestamp","Date","getTime","fileName","name","replace","storagePath","storageRef","uploadTask","Promise","resolve","reject","on","snapshot","progress","bytesTransferred","totalBytes","downloadURL","url","publicId","provider","size","handleImageUpload"],"sources":["/Users/yeduruabhiram/Desktop/suresh ment01/src/utils/imageUtil.js"],"sourcesContent":["import imageCompression from 'browser-image-compression';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../firebase/config';\n\n// Default teddy bear image URL (remote URL rather than base64)\nexport const DEFAULT_TEDDY_IMAGE = 'https://firebasestorage.googleapis.com/v0/b/suresh-teddy-bears-shop.appspot.com/o/default-teddy.jpg?alt=media';\n\n/**\n * Compresses an image file\n */\nexport const compressImage = async (file) => {\n  if (!file) return null;\n  \n  const options = {\n    maxSizeMB: 0.5, // Compress to 500KB\n    maxWidthOrHeight: 800,\n    useWebWorker: true\n  };\n  \n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error compressing image:\", error);\n    return file; // Return original file if compression fails\n  }\n};\n\n/**\n * Creates a thumbnail version of the image\n */\nexport const createThumbnail = async (file) => {\n  if (!file) return null;\n  \n  const options = {\n    maxSizeMB: 0.1, // Very small thumbnail (100KB)\n    maxWidthOrHeight: 200,\n    useWebWorker: true\n  };\n  \n  try {\n    return await imageCompression(file, options);\n  } catch (error) {\n    console.error(\"Error creating thumbnail:\", error);\n    return null;\n  }\n};\n\n/**\n * Uploads an image to Firebase Storage\n */\nexport const uploadToFirebase = async (file, progressCallback = null) => {\n  if (!file) return null;\n  \n  try {\n    // First compress the image\n    const compressedFile = await compressImage(file);\n    \n    // Generate a unique path in storage\n    const timestamp = new Date().getTime();\n    const fileName = file.name.replace(/[^a-zA-Z0-9.]/g, '_');\n    const storagePath = `products/${timestamp}_${fileName}`;\n    const storageRef = ref(storage, storagePath);\n    \n    // Upload to Firebase Storage with progress monitoring\n    const uploadTask = uploadBytesResumable(storageRef, compressedFile);\n    \n    // Return a promise that resolves when upload is complete\n    return new Promise((resolve, reject) => {\n      uploadTask.on('state_changed', \n        // Progress handler\n        (snapshot) => {\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          if (progressCallback) {\n            progressCallback(progress);\n          }\n        },\n        // Error handler\n        (error) => {\n          console.error(\"Upload error:\", error);\n          reject(error);\n        },\n        // Complete handler\n        async () => {\n          // Get download URL\n          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n          \n          // Return the image data\n          resolve({\n            url: downloadURL,\n            publicId: storagePath,\n            provider: 'firebase',\n            size: compressedFile.size\n          });\n        }\n      );\n    });\n  } catch (error) {\n    console.error(\"Error in upload process:\", error);\n    throw error;\n  }\n};\n\n/**\n * Handle image upload with fallbacks\n */\nexport const handleImageUpload = async (file, progressCallback = null) => {\n  if (!file) {\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default-teddy',\n      provider: 'default'\n    };\n  }\n  \n  try {\n    // Try Firebase Storage upload first\n    return await uploadToFirebase(file, progressCallback);\n  } catch (error) {\n    console.error(\"Firebase upload failed:\", error);\n    \n    // If everything fails, return the default image\n    return {\n      url: DEFAULT_TEDDY_IMAGE,\n      publicId: 'default-teddy',\n      provider: 'default'\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}